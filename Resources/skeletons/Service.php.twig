<?php
/**
 *  This file is generated by CodeRight
 */
namespace {{namespace}}\Service;

use Doctrine\ORM\EntityManager;
use Symfony\Component\Translation\Translator;

use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\Expr\OrderBy;
use {{namespace}}\Entity\{{entityClassName}};
use SearchableBundle\Service\SearchableService;

/**
 * Description of {{bundle}} {{entityClassName}}Service
 *
 * @author kai
 */
class {{entityClassName}}Service extends SearchableService
{
    protected $container;
    public function __construct(EntityManager $em, 
                                $entityClass,
                                Translator $trans,
                                $logger,
                                $container
                                )
    {
        $this->em = $em;
        $this->entityClass = $entityClass;
        $this->repository = $em->getRepository($entityClass);
        $this->trans = $trans;
        $this->logger = $logger;
        $this->container = $container;
    }

    public function add($obj){
        $this->getLogger()->info( 'Create {{entityClassName}}');
        if(count($obj) > 0){
            $now = new \DateTime();
            $ent = new $this->entityClass();

            $userId = $obj['userId'];

            {% for m in fieldMappings %}
                {% if m.fieldName != 'id' 
                    and m.fieldName != 'isDeleted' 
                    and m.fieldName != 'createdBy' 
                    and m.fieldName != 'updatedBy'
                    and m.fieldName != 'createdTime' 
                    and m.fieldName != 'updatedTime'
                %}
            // ------- field {{ m.fieldName|e }} start -----
            if (!array_key_exists('{{ m.fieldName|e }}', $obj) || empty($obj['{{ m.fieldName|e }}'])) {
                throw new \Exception('{{ m.fieldName|e }} not found');
            }
            $ent->set{{m.fieldName|capitalize}}($obj['{{ m.fieldName|e }}']); 
            // ------- field {{ m.fieldName|e }} end -----
                {% endif %}
            {% endfor %}

            
            $ent->setIsDeleted( 'N');
            $ent->setCreatedBy($userId);
            $ent->setUpdatedBy($userId);
            $ent->setCreatedTime($now);
            $ent->setUpdatedTime($now);

            $this->em->persist($ent);
            $this->em->flush();
            $this->em->clear();

            // 如果是simple模式的话，只返回简单的id，uid， updated time
            if(array_key_exists( '_simple', $ent)){
                return $this->process([$ent], true);
            }else{
                return $this->process([$ent]);
            }
        }else{
            return $this->printError();
        }
    }

    public function update($objs){
        $this->getLogger()->info( 'Update {{entityClassName}}');
        if(count($objs) > 0){
            $updated = [];
            foreach($objs as $obj){
                $now = new \DateTime();
                $update = null;
                if(array_key_exists('id', $obj) && !empty($obj['id'])){
                    $update = $this->em->find($this->entityClass, $obj['id']);
                }else if(array_key_exists('uid', $obj) && !empty($obj['uid'])){
                    $update = $this->em->getRepository($this->entityClass)->findOneByUid($obj['uid']);
                }
                if(!empty($update)){
                    {% for m in fieldMappings %}
                    {% if m.fieldName != 'id' 
                        and m.fieldName != 'createdBy' 
                        and m.fieldName != 'updatedBy'
                        and m.fieldName != 'createdTime' 
                        and m.fieldName != 'updatedTime'
                    %}
                    // ------- field {{ m.fieldName|e }} start -----
                    if(array_key_exists( '{{ m.fieldName|e }}', $obj) && ! empty($obj['{{ m.fieldName|e }}'])){
                        $update->set{{m.fieldName|capitalize}}($obj['{{ m.fieldName|e }}']);
                    }
                    // ------- field {{ m.fieldName|e }} end -----
                    {% endif %}
                    {% endfor %}

                    $update->setUpdatedTime($now);

                    $this->em->persist($update);

                    array_push($updated, $update);
                }
            }
            $this->em->flush();
            $this->em->clear();
            return $this->process($updated);
        }else{
            return $this->printError();
        }
    }

    protected function process($ents, $simpleMode = false, $fields = null){
        if(! empty($ents)){
            $results = [];
            foreach($ents as $ent){
                if(! empty($ent)){
                    $result =[];
                    if($simpleMode){
                        $result = $this->filterFields($ent, [
                            'id',
                            'uid',
                            'updatedTime',
                            'createdTime'
                        ]);
                    }else{
                        $result = array_merge($result, $this->filterFields($ent, empty($fields) ? [              
                        {% for m in fieldMappings %}
                        '{{ m.fieldName|e }}',
                        {% endfor %}
                        ]:$fields));
                    }
                    array_push($results, $result);
                }
            }
            return $results;
        }else{
            return[];
        }
    }
}
